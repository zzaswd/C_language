
Exam_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001c2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000092f  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000854  00000000  00000000  00000c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000316  00000000  00000000  0000148b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000017a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e0  00000000  00000000  00001c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001d16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	40 d0       	rcall	.+128    	; 0x144 <main>
  c4:	7c c0       	rjmp	.+248    	; 0x1be <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <print_seg>:
						0x39,0x5e,0x79,0x71,
						0x08,0x80};


void print_seg(int n){
	int n1 = n % 10;
  c8:	6a e0       	ldi	r22, 0x0A	; 10
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	51 d0       	rcall	.+162    	; 0x170 <__divmodhi4>
	
	PORTA=font[n1];	
  ce:	fc 01       	movw	r30, r24
  d0:	e0 50       	subi	r30, 0x00	; 0
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	80 81       	ld	r24, Z
  d6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	9f e8       	ldi	r25, 0x8F	; 143
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <print_seg+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <print_seg+0x1a>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <__vector_10>:
	
	_delay_ms(10);
}

int real_count = 0;
ISR(TIMER2_OVF_vect){
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	TCNT2 = 112; 
  f4:	80 e7       	ldi	r24, 0x70	; 112
  f6:	84 bd       	out	0x24, r24	; 36
	count++;
  f8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <count>
  fc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <count+0x1>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <count+0x1>
 106:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <count>
	if(count ==100){
 10a:	84 36       	cpi	r24, 0x64	; 100
 10c:	91 05       	cpc	r25, r1
 10e:	99 f4       	brne	.+38     	; 0x136 <__vector_10+0x50>
		count = 0;
 110:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <count+0x1>
 114:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <count>
		real_count++;
 118:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 11c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 126:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		if(real_count ==10){
 12a:	0a 97       	sbiw	r24, 0x0a	; 10
 12c:	21 f4       	brne	.+8      	; 0x136 <__vector_10+0x50>
			real_count = 0;
 12e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 132:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
		}
	}
}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <main>:


int main(void)
{
	DDRA = 0xff; 
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
 148:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xff;
 14a:	87 bb       	out	0x17, r24	; 23
	PORTA = 0xff;
 14c:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0xfe;
 14e:	8e ef       	ldi	r24, 0xFE	; 254
 150:	85 bb       	out	0x15, r24	; 21
	OCR2 = 144;
 152:	80 e9       	ldi	r24, 0x90	; 144
 154:	83 bd       	out	0x23, r24	; 35
	TIMSK = (1<<TOIE2);
 156:	80 e4       	ldi	r24, 0x40	; 64
 158:	87 bf       	out	0x37, r24	; 55
	TCCR2 = (1<<CS22) | (1 << CS20) | (1<<COM20) | (0<<COM21); // prescaler 1024, OC2 = toggle
 15a:	85 e1       	ldi	r24, 0x15	; 21
 15c:	85 bd       	out	0x25, r24	; 37
	TCNT2 = 112; 
 15e:	80 e7       	ldi	r24, 0x70	; 112
 160:	84 bd       	out	0x24, r24	; 36
	
	sei();
 162:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		print_seg(real_count);
 164:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 168:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 16c:	ad df       	rcall	.-166    	; 0xc8 <print_seg>
 16e:	fa cf       	rjmp	.-12     	; 0x164 <main+0x20>

00000170 <__divmodhi4>:
 170:	97 fb       	bst	r25, 7
 172:	07 2e       	mov	r0, r23
 174:	16 f4       	brtc	.+4      	; 0x17a <__divmodhi4+0xa>
 176:	00 94       	com	r0
 178:	06 d0       	rcall	.+12     	; 0x186 <__divmodhi4_neg1>
 17a:	77 fd       	sbrc	r23, 7
 17c:	08 d0       	rcall	.+16     	; 0x18e <__divmodhi4_neg2>
 17e:	0b d0       	rcall	.+22     	; 0x196 <__udivmodhi4>
 180:	07 fc       	sbrc	r0, 7
 182:	05 d0       	rcall	.+10     	; 0x18e <__divmodhi4_neg2>
 184:	3e f4       	brtc	.+14     	; 0x194 <__divmodhi4_exit>

00000186 <__divmodhi4_neg1>:
 186:	90 95       	com	r25
 188:	81 95       	neg	r24
 18a:	9f 4f       	sbci	r25, 0xFF	; 255
 18c:	08 95       	ret

0000018e <__divmodhi4_neg2>:
 18e:	70 95       	com	r23
 190:	61 95       	neg	r22
 192:	7f 4f       	sbci	r23, 0xFF	; 255

00000194 <__divmodhi4_exit>:
 194:	08 95       	ret

00000196 <__udivmodhi4>:
 196:	aa 1b       	sub	r26, r26
 198:	bb 1b       	sub	r27, r27
 19a:	51 e1       	ldi	r21, 0x11	; 17
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <__udivmodhi4_ep>

0000019e <__udivmodhi4_loop>:
 19e:	aa 1f       	adc	r26, r26
 1a0:	bb 1f       	adc	r27, r27
 1a2:	a6 17       	cp	r26, r22
 1a4:	b7 07       	cpc	r27, r23
 1a6:	10 f0       	brcs	.+4      	; 0x1ac <__udivmodhi4_ep>
 1a8:	a6 1b       	sub	r26, r22
 1aa:	b7 0b       	sbc	r27, r23

000001ac <__udivmodhi4_ep>:
 1ac:	88 1f       	adc	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	5a 95       	dec	r21
 1b2:	a9 f7       	brne	.-22     	; 0x19e <__udivmodhi4_loop>
 1b4:	80 95       	com	r24
 1b6:	90 95       	com	r25
 1b8:	bc 01       	movw	r22, r24
 1ba:	cd 01       	movw	r24, r26
 1bc:	08 95       	ret

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
