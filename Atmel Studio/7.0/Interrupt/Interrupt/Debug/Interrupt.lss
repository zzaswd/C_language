
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001e0  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  00000286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098f  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000888  00000000  00000000  00000cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000369  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000018b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000202  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	aa c0       	rjmp	.+340    	; 0x15a <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	b9 c0       	rjmp	.+370    	; 0x188 <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	79 d0       	rcall	.+242    	; 0x1b6 <main>
  c4:	8b c0       	rjmp	.+278    	; 0x1dc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <segment>:
						0x66,0x6d,0x7d,0x07,
						0x7f,0x67,0x77,0x7c,
						0x39,0x5e,0x79,0x71,
						0x08,0x80};
						
void segment(uint8_t n){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <segment+0x6>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	unsigned char	n10,n1;							
	n10 = n /10;
  d2:	9d ec       	ldi	r25, 0xCD	; 205
  d4:	89 9f       	mul	r24, r25
  d6:	91 2d       	mov	r25, r1
  d8:	11 24       	eor	r1, r1
  da:	96 95       	lsr	r25
  dc:	96 95       	lsr	r25
  de:	96 95       	lsr	r25
	n1 = n % 10;
  e0:	39 2f       	mov	r19, r25
  e2:	33 0f       	add	r19, r19
  e4:	23 2f       	mov	r18, r19
  e6:	22 0f       	add	r18, r18
  e8:	22 0f       	add	r18, r18
  ea:	23 0f       	add	r18, r19
  ec:	82 1b       	sub	r24, r18
	unsigned char print[]={n10,n1};
  ee:	99 83       	std	Y+1, r25	; 0x01
  f0:	8a 83       	std	Y+2, r24	; 0x02

	int mask = 0x01;
	int num = 0;
	/* Replace with your application code */
	for(int i = 0; i < 12 ; i ++){
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
	n10 = n /10;
	n1 = n % 10;
	unsigned char print[]={n10,n1};

	int mask = 0x01;
	int num = 0;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char	n10,n1;							
	n10 = n /10;
	n1 = n % 10;
	unsigned char print[]={n10,n1};

	int mask = 0x01;
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
	int num = 0;
	/* Replace with your application code */
	for(int i = 0; i < 12 ; i ++){
  fe:	25 c0       	rjmp	.+74     	; 0x14a <segment+0x82>
		// 0001 0010 0100 1000;
		PORTG = ~mask;
 100:	62 2f       	mov	r22, r18
 102:	60 95       	com	r22
 104:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		PORTB = font[print[num++]];
 108:	bc 01       	movw	r22, r24
 10a:	6f 5f       	subi	r22, 0xFF	; 255
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	e1 e0       	ldi	r30, 0x01	; 1
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	ec 0f       	add	r30, r28
 114:	fd 1f       	adc	r31, r29
 116:	e8 0f       	add	r30, r24
 118:	f9 1f       	adc	r31, r25
 11a:	e0 81       	ld	r30, Z
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	e0 50       	subi	r30, 0x00	; 0
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	80 81       	ld	r24, Z
 124:	88 bb       	out	0x18, r24	; 24
		mask = mask << 1;
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	86 e6       	ldi	r24, 0x66	; 102
 12c:	9e e0       	ldi	r25, 0x0E	; 14
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <segment+0x66>
 132:	00 00       	nop
		_delay_ms(1);
		if(num ==2){
 134:	62 30       	cpi	r22, 0x02	; 2
 136:	71 05       	cpc	r23, r1
 138:	11 f0       	breq	.+4      	; 0x13e <segment+0x76>
	int num = 0;
	/* Replace with your application code */
	for(int i = 0; i < 12 ; i ++){
		// 0001 0010 0100 1000;
		PORTG = ~mask;
		PORTB = font[print[num++]];
 13a:	cb 01       	movw	r24, r22
 13c:	04 c0       	rjmp	.+8      	; 0x146 <segment+0x7e>
		mask = mask << 1;
		_delay_ms(1);
		if(num ==2){
			mask = 0x01;
			num = 0;
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
		PORTG = ~mask;
		PORTB = font[print[num++]];
		mask = mask << 1;
		_delay_ms(1);
		if(num ==2){
			mask = 0x01;
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char print[]={n10,n1};

	int mask = 0x01;
	int num = 0;
	/* Replace with your application code */
	for(int i = 0; i < 12 ; i ++){
 146:	4f 5f       	subi	r20, 0xFF	; 255
 148:	5f 4f       	sbci	r21, 0xFF	; 255
 14a:	4c 30       	cpi	r20, 0x0C	; 12
 14c:	51 05       	cpc	r21, r1
 14e:	c4 f2       	brlt	.-80     	; 0x100 <segment+0x38>
			mask = 0x01;
			num = 0;
		}
	}
	
}
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <__vector_1>:

ISR(INT0_vect){		//인터럽트 벡터 == isr.
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	count++;	
 168:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 16c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 176:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
}
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_5>:

ISR(INT4_vect){		//인터럽트 벡터 == isr.
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
	count--;
 196:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 19a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 1a4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
}
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <main>:

int main(void)
{
	DDRB = 0xff;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	87 bb       	out	0x17, r24	; 23
	DDRG = 0x0f;
 1ba:	8f e0       	ldi	r24, 0x0F	; 15
 1bc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRD = 0x00;
 1c0:	11 ba       	out	0x11, r1	; 17
	DDRE = 0x00;
 1c2:	12 b8       	out	0x02, r1	; 2
	//SREG = 0x80; // == sei(); 글로벌 인터럽트를 활성화 시켜준다는 의미. 근데 현재 SREG가 안되서 동일한 sei를 사용.
	sei();
 1c4:	78 94       	sei
	
	//DDRB = 0x00;
	
	//EIMSK = 0x01;
	//EIMSK = 1<<INT0;
	EIMSK = (1<<INT0) | (1<<INT4) ;
 1c6:	81 e1       	ldi	r24, 0x11	; 17
 1c8:	89 bf       	out	0x39, r24	; 57
	//EICRA = 0x03;
	//EICRA = (1<<ISC01) | (1<< ISC00); //rising
	EICRA = (1<<ISC01) | (0<< ISC00); //falling
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = (1<<ISC41) | (1<< ISC40); //rising
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	8a bf       	out	0x3a, r24	; 58
	
	
    /* Replace with your application code */
    while (1) 
    {
		segment(count);	
 1d4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1d8:	77 df       	rcall	.-274    	; 0xc8 <segment>
 1da:	fc cf       	rjmp	.-8      	; 0x1d4 <main+0x1e>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
