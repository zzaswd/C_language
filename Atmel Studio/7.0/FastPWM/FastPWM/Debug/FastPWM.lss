
FastPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002b0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800112  00800112  00000356  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a97  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000874  00000000  00000000  00000e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043c  00000000  00000000  00001713  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000282  00000000  00000000  0000203b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000022bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	93 c0       	rjmp	.+294    	; 0x164 <__vector_15>
  3e:	00 00       	nop
  40:	be c0       	rjmp	.+380    	; 0x1be <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	aa d0       	rcall	.+340    	; 0x218 <main>
  c4:	f3 c0       	rjmp	.+486    	; 0x2ac <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <l_segment>:


void l_segment(int n){
	unsigned char N10, N1;
	N10 = n/10;
	N1= n%10;
  c8:	6a e0       	ldi	r22, 0x0A	; 10
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	c8 d0       	rcall	.+400    	; 0x25e <__divmodhi4>
  ce:	ac 01       	movw	r20, r24
	for(int i = 0 ; i < 2 ; i ++){
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	1c c0       	rjmp	.+56     	; 0x10e <l_segment+0x46>
		PORTC = 0x0e;
  d6:	9e e0       	ldi	r25, 0x0E	; 14
  d8:	95 bb       	out	0x15, r25	; 21
		PORTA = font[N10];
  da:	fb 01       	movw	r30, r22
  dc:	ff 27       	eor	r31, r31
  de:	e0 50       	subi	r30, 0x00	; 0
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	90 81       	ld	r25, Z
  e4:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	86 e6       	ldi	r24, 0x66	; 102
  e8:	9e e0       	ldi	r25, 0x0E	; 14
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <l_segment+0x22>
  ee:	00 00       	nop
		_delay_ms(1);
		PORTC = 0x0d;
  f0:	9d e0       	ldi	r25, 0x0D	; 13
  f2:	95 bb       	out	0x15, r25	; 21
		PORTA = font[N1];
  f4:	fa 01       	movw	r30, r20
  f6:	ff 27       	eor	r31, r31
  f8:	e0 50       	subi	r30, 0x00	; 0
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	90 81       	ld	r25, Z
  fe:	9b bb       	out	0x1b, r25	; 27
 100:	86 e6       	ldi	r24, 0x66	; 102
 102:	9e e0       	ldi	r25, 0x0E	; 14
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <l_segment+0x3c>
 108:	00 00       	nop

void l_segment(int n){
	unsigned char N10, N1;
	N10 = n/10;
	N1= n%10;
	for(int i = 0 ; i < 2 ; i ++){
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	22 30       	cpi	r18, 0x02	; 2
 110:	31 05       	cpc	r19, r1
 112:	0c f3       	brlt	.-62     	; 0xd6 <l_segment+0xe>
		PORTC = 0x0d;
		PORTA = font[N1];
		_delay_ms(1);
		
	}
}
 114:	08 95       	ret

00000116 <r_segment>:

void r_segment(int n){
	unsigned char N10, N1;
	N10 = n/10;
	N1= n%10;
 116:	6a e0       	ldi	r22, 0x0A	; 10
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	a1 d0       	rcall	.+322    	; 0x25e <__divmodhi4>
 11c:	ac 01       	movw	r20, r24
	for(int i = 0 ; i < 2 ; i ++){
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	1c c0       	rjmp	.+56     	; 0x15c <r_segment+0x46>
		PORTC = 0x0b;
 124:	9b e0       	ldi	r25, 0x0B	; 11
 126:	95 bb       	out	0x15, r25	; 21
		PORTA = font[N10];
 128:	fb 01       	movw	r30, r22
 12a:	ff 27       	eor	r31, r31
 12c:	e0 50       	subi	r30, 0x00	; 0
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	90 81       	ld	r25, Z
 132:	9b bb       	out	0x1b, r25	; 27
 134:	86 e6       	ldi	r24, 0x66	; 102
 136:	9e e0       	ldi	r25, 0x0E	; 14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <r_segment+0x22>
 13c:	00 00       	nop
		_delay_ms(1);
		PORTC = 0x07;
 13e:	97 e0       	ldi	r25, 0x07	; 7
 140:	95 bb       	out	0x15, r25	; 21
		PORTA = font[N1];
 142:	fa 01       	movw	r30, r20
 144:	ff 27       	eor	r31, r31
 146:	e0 50       	subi	r30, 0x00	; 0
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	90 81       	ld	r25, Z
 14c:	9b bb       	out	0x1b, r25	; 27
 14e:	86 e6       	ldi	r24, 0x66	; 102
 150:	9e e0       	ldi	r25, 0x0E	; 14
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <r_segment+0x3c>
 156:	00 00       	nop

void r_segment(int n){
	unsigned char N10, N1;
	N10 = n/10;
	N1= n%10;
	for(int i = 0 ; i < 2 ; i ++){
 158:	2f 5f       	subi	r18, 0xFF	; 255
 15a:	3f 4f       	sbci	r19, 0xFF	; 255
 15c:	22 30       	cpi	r18, 0x02	; 2
 15e:	31 05       	cpc	r19, r1
 160:	0c f3       	brlt	.-62     	; 0x124 <r_segment+0xe>
		PORTC = 0x07;
		PORTA = font[N1];
		_delay_ms(1);
		
	}
}
 162:	08 95       	ret

00000164 <__vector_15>:

ISR(TIMER0_COMP_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
	l_tcnt++;
 172:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <l_tcnt>
 176:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <l_tcnt+0x1>
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <l_tcnt+0x1>
 180:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <l_tcnt>
	if(l_tcnt>=28){
 184:	4c 97       	sbiw	r24, 0x1c	; 28
 186:	a4 f0       	brlt	.+40     	; 0x1b0 <__vector_15+0x4c>
		l_tcnt = 0;
 188:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <l_tcnt+0x1>
 18c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <l_tcnt>
		l_mcnt++;
 190:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 194:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 19e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		if(l_mcnt > 99)
 1a2:	84 36       	cpi	r24, 0x64	; 100
 1a4:	91 05       	cpc	r25, r1
 1a6:	24 f0       	brlt	.+8      	; 0x1b0 <__vector_15+0x4c>
			l_mcnt = 0;
 1a8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 1ac:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	}
}
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <__vector_16>:

ISR(TIMER0_OVF_vect){
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
	r_tcnt++;
 1cc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <r_tcnt>
 1d0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <r_tcnt+0x1>
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <r_tcnt+0x1>
 1da:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <r_tcnt>
	if(r_tcnt>=56){
 1de:	c8 97       	sbiw	r24, 0x38	; 56
 1e0:	a4 f0       	brlt	.+40     	; 0x20a <__vector_16+0x4c>
		r_tcnt = 0;
 1e2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <r_tcnt+0x1>
 1e6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <r_tcnt>
		r_mcnt++;
 1ea:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <r_mcnt>
 1ee:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <r_mcnt+0x1>
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <r_mcnt+0x1>
 1f8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <r_mcnt>
		if(r_mcnt > 99)
 1fc:	84 36       	cpi	r24, 0x64	; 100
 1fe:	91 05       	cpc	r25, r1
 200:	24 f0       	brlt	.+8      	; 0x20a <__vector_16+0x4c>
			r_mcnt = 0;
 202:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <r_mcnt+0x1>
 206:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <r_mcnt>
	}
}
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <main>:

int main(void){
	DDRA = 0xff;
 218:	9f ef       	ldi	r25, 0xFF	; 255
 21a:	9a bb       	out	0x1a, r25	; 26
	DDRC = 0x0f;
 21c:	8f e0       	ldi	r24, 0x0F	; 15
 21e:	84 bb       	out	0x14, r24	; 20
	PORTA = 0xff;
 220:	9b bb       	out	0x1b, r25	; 27
	PORTC = 0x0f;
 222:	85 bb       	out	0x15, r24	; 21
	DDRB = 0x10;
 224:	80 e1       	ldi	r24, 0x10	; 16
 226:	87 bb       	out	0x17, r24	; 23
	
	TCCR0 |= (1<<WGM01)|(1<<WGM00);
 228:	83 b7       	in	r24, 0x33	; 51
 22a:	88 64       	ori	r24, 0x48	; 72
 22c:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<COM01)|(0<<COM00);
 22e:	83 b7       	in	r24, 0x33	; 51
 230:	80 62       	ori	r24, 0x20	; 32
 232:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1<<CS02)|(1<<CS01)|(1<<CS00);
 234:	83 b7       	in	r24, 0x33	; 51
 236:	87 60       	ori	r24, 0x07	; 7
 238:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0) | (1<<OCIE0);
 23a:	87 b7       	in	r24, 0x37	; 55
 23c:	83 60       	ori	r24, 0x03	; 3
 23e:	87 bf       	out	0x37, r24	; 55
	
	TCNT0 = 0;
 240:	12 be       	out	0x32, r1	; 50
	OCR0 = 102;	
 242:	86 e6       	ldi	r24, 0x66	; 102
 244:	81 bf       	out	0x31, r24	; 49
	sei();
 246:	78 94       	sei
	while(1){
		r_segment(r_mcnt);
 248:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <r_mcnt>
 24c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <r_mcnt+0x1>
 250:	62 df       	rcall	.-316    	; 0x116 <r_segment>
		l_segment(l_mcnt);
 252:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 256:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 25a:	36 df       	rcall	.-404    	; 0xc8 <l_segment>
 25c:	f5 cf       	rjmp	.-22     	; 0x248 <main+0x30>

0000025e <__divmodhi4>:
 25e:	97 fb       	bst	r25, 7
 260:	07 2e       	mov	r0, r23
 262:	16 f4       	brtc	.+4      	; 0x268 <__divmodhi4+0xa>
 264:	00 94       	com	r0
 266:	06 d0       	rcall	.+12     	; 0x274 <__divmodhi4_neg1>
 268:	77 fd       	sbrc	r23, 7
 26a:	08 d0       	rcall	.+16     	; 0x27c <__divmodhi4_neg2>
 26c:	0b d0       	rcall	.+22     	; 0x284 <__udivmodhi4>
 26e:	07 fc       	sbrc	r0, 7
 270:	05 d0       	rcall	.+10     	; 0x27c <__divmodhi4_neg2>
 272:	3e f4       	brtc	.+14     	; 0x282 <__divmodhi4_exit>

00000274 <__divmodhi4_neg1>:
 274:	90 95       	com	r25
 276:	81 95       	neg	r24
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	08 95       	ret

0000027c <__divmodhi4_neg2>:
 27c:	70 95       	com	r23
 27e:	61 95       	neg	r22
 280:	7f 4f       	sbci	r23, 0xFF	; 255

00000282 <__divmodhi4_exit>:
 282:	08 95       	ret

00000284 <__udivmodhi4>:
 284:	aa 1b       	sub	r26, r26
 286:	bb 1b       	sub	r27, r27
 288:	51 e1       	ldi	r21, 0x11	; 17
 28a:	07 c0       	rjmp	.+14     	; 0x29a <__udivmodhi4_ep>

0000028c <__udivmodhi4_loop>:
 28c:	aa 1f       	adc	r26, r26
 28e:	bb 1f       	adc	r27, r27
 290:	a6 17       	cp	r26, r22
 292:	b7 07       	cpc	r27, r23
 294:	10 f0       	brcs	.+4      	; 0x29a <__udivmodhi4_ep>
 296:	a6 1b       	sub	r26, r22
 298:	b7 0b       	sbc	r27, r23

0000029a <__udivmodhi4_ep>:
 29a:	88 1f       	adc	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	5a 95       	dec	r21
 2a0:	a9 f7       	brne	.-22     	; 0x28c <__udivmodhi4_loop>
 2a2:	80 95       	com	r24
 2a4:	90 95       	com	r25
 2a6:	bc 01       	movw	r22, r24
 2a8:	cd 01       	movw	r24, r26
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
