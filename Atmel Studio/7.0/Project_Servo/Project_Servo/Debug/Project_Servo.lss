
Project_Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086b  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a9  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f3  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c5  00000000  00000000  0000197f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	35 d0       	rcall	.+106    	; 0x114 <main>
  aa:	47 c0       	rjmp	.+142    	; 0x13a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:
	else if(Angle == 90)
	AngleCount = 7; // PWM ON Time 0.7[ms]
 }
 
	
ISR(TIMER0_OVF_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
	TCNT0 = 244;
  c0:	84 ef       	ldi	r24, 0xF4	; 244
  c2:	82 bf       	out	0x32, r24	; 50
	t_cnt++;
  c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_cnt>
  c8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <t_cnt+0x1>
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <t_cnt+0x1>
  d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_cnt>
	
	if(t_cnt <= AngleCount)
  d6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  da:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	1c f0       	brlt	.+6      	; 0xea <__vector_16+0x3c>
		PORTB= 0xff; // PWM ON Time
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	88 bb       	out	0x18, r24	; 24
  e8:	01 c0       	rjmp	.+2      	; 0xec <__vector_16+0x3e>
	else
		PORTB = 0x00; // PWM OFF Time
  ea:	18 ba       	out	0x18, r1	; 24
	if(t_cnt >= 200)
  ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_cnt>
  f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <t_cnt+0x1>
  f4:	88 3c       	cpi	r24, 0xC8	; 200
  f6:	91 05       	cpc	r25, r1
  f8:	24 f0       	brlt	.+8      	; 0x102 <__vector_16+0x54>
		t_cnt = 0; // 20[ms] 주기 PWM
  fa:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <t_cnt+0x1>
  fe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <t_cnt>
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	3f 91       	pop	r19
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <main>:

int main(void)
{

	DDRB = 0xff;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	87 bb       	out	0x17, r24	; 23
	//OCR0 = 131;
	PORTB = 0xff;
 118:	88 bb       	out	0x18, r24	; 24
	TCCR0 = (1<<CS02) |  (0<<CS01) | (1<<CS00);
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0) ;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	87 bf       	out	0x37, r24	; 55
	AngleCount = 15; // 초기 서보 위치를 0도로 설정한다
 122:	8f e0       	ldi	r24, 0x0F	; 15
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	TCNT0 = 244;
 12e:	84 ef       	ldi	r24, 0xF4	; 244
 130:	82 bf       	out	0x32, r24	; 50
	
	sei();
 132:	78 94       	sei
		
    
	}
	*/
	
}
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	08 95       	ret

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
