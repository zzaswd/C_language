
Project_Serial_RFID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000025e  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000002f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a75  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d3  00000000  00000000  00000e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a5  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000485  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000157  00000000  00000000  00001f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0d d0       	rcall	.+26     	; 0xde <main>
  c4:	ca c0       	rjmp	.+404    	; 0x25a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <UART0_transmit>:

void UART1_transmit(char data){
	while(!(UCSR1A & (1<<UDRE1))); // UDRE0 = 5; UCSR0A에서 bit 5가 UDRE이며 UDR이 비어있을 때만 보낼 수 있기 때문에 확인하는 과정이다. 0x1 5bit
	// 비어있는 경우 1& 1 = 1 -> not 해서 0 되면서 while을 빠져나간다.
	
	UDR1 = data;
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART0_transmit>
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <UART1_receive>:
  d0:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  d4:	88 23       	and	r24, r24
  d6:	e4 f7       	brge	.-8      	; 0xd0 <UART1_receive>
  d8:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  dc:	08 95       	ret

000000de <main>:
}


int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	a8 97       	sbiw	r28, 0x28	; 40
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */
	//DDRE = 0xFE;
	//UCSR0A는 딱히 건드릴 것이 없다.
	UCSR0B = (1<<RXEN0) | (1<<TXEN0); // Tx, Rx 를 모두 Enable 한다.
  f2:	98 e1       	ldi	r25, 0x18	; 24
  f4:	9a b9       	out	0x0a, r25	; 10
	//UCSR0C도 딱히 건드릴 것이 없다.
	UBRR0L = 95;
  f6:	8f e5       	ldi	r24, 0x5F	; 95
  f8:	89 b9       	out	0x09, r24	; 9
	
	UCSR1B = (1<<RXEN1) | (1<<TXEN1); // Tx, Rx 를 모두 Enable 한다.
  fa:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	//UCSR0C도 딱히 건드릴 것이 없다.
	UBRR1L = 95;
  fe:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UDR1 = data;
}


int main(void)
{
 102:	e1 2c       	mov	r14, r1
 104:	f1 2c       	mov	r15, r1
	char recv_msg[20];
	
	int idx = 0;
	while (1)
	{
		recv_msg[idx++] = UART1_receive();
 106:	67 01       	movw	r12, r14
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	c8 1a       	sub	r12, r24
 10c:	d8 0a       	sbc	r13, r24
 10e:	e0 df       	rcall	.-64     	; 0xd0 <UART1_receive>
 110:	e1 e0       	ldi	r30, 0x01	; 1
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	ec 0f       	add	r30, r28
 116:	fd 1f       	adc	r31, r29
 118:	ee 0d       	add	r30, r14
 11a:	ff 1d       	adc	r31, r15
 11c:	80 83       	st	Z, r24
		if(recv_msg[idx-1] == 'L'){
 11e:	8c 34       	cpi	r24, 0x4C	; 76
 120:	99 f0       	breq	.+38     	; 0x148 <main+0x6a>
	char recv_msg[20];
	
	int idx = 0;
	while (1)
	{
		recv_msg[idx++] = UART1_receive();
 122:	76 01       	movw	r14, r12
 124:	f0 cf       	rjmp	.-32     	; 0x106 <main+0x28>
		if(recv_msg[idx-1] == 'L'){
			
			for(int jdx = 0; jdx <idx;jdx++){
					UART0_transmit(recv_msg[jdx]);
 126:	e1 e0       	ldi	r30, 0x01	; 1
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	e0 0f       	add	r30, r16
 130:	f1 1f       	adc	r31, r17
 132:	80 81       	ld	r24, Z
 134:	c9 df       	rcall	.-110    	; 0xc8 <UART0_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	af ef       	ldi	r26, 0xFF	; 255
 138:	bf e8       	ldi	r27, 0x8F	; 143
 13a:	11 97       	sbiw	r26, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0x5c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x62>
 140:	00 00       	nop
	while (1)
	{
		recv_msg[idx++] = UART1_receive();
		if(recv_msg[idx-1] == 'L'){
			
			for(int jdx = 0; jdx <idx;jdx++){
 142:	0f 5f       	subi	r16, 0xFF	; 255
 144:	1f 4f       	sbci	r17, 0xFF	; 255
 146:	02 c0       	rjmp	.+4      	; 0x14c <main+0x6e>
 148:	00 e0       	ldi	r16, 0x00	; 0
 14a:	10 e0       	ldi	r17, 0x00	; 0
 14c:	0c 15       	cp	r16, r12
 14e:	1d 05       	cpc	r17, r13
 150:	54 f3       	brlt	.-44     	; 0x126 <main+0x48>
					UART0_transmit(recv_msg[jdx]);
					_delay_ms(10);
			}
			
			
			recv_msg[idx-1] = NULL;
 152:	e1 e0       	ldi	r30, 0x01	; 1
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ec 0f       	add	r30, r28
 158:	fd 1f       	adc	r31, r29
 15a:	ee 0d       	add	r30, r14
 15c:	ff 1d       	adc	r31, r15
 15e:	10 82       	st	Z, r1
			char *pArray[10];
			char ptr = strtok(recv_msg,"@");
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	71 e0       	ldi	r23, 0x01	; 1
 164:	ce 01       	movw	r24, r28
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	46 d0       	rcall	.+140    	; 0x1f6 <strtok>
			
			int i = 0;
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
			while(ptr!=NULL){
 16e:	13 c0       	rjmp	.+38     	; 0x196 <main+0xb8>
				pArray[i++] = ptr;
 170:	89 01       	movw	r16, r18
 172:	0f 5f       	subi	r16, 0xFF	; 255
 174:	1f 4f       	sbci	r17, 0xFF	; 255
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	e1 e0       	ldi	r30, 0x01	; 1
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	ec 0f       	add	r30, r28
 180:	fd 1f       	adc	r31, r29
 182:	e2 0f       	add	r30, r18
 184:	f3 1f       	adc	r31, r19
 186:	95 8b       	std	Z+21, r25	; 0x15
 188:	84 8b       	std	Z+20, r24	; 0x14
				ptr = strtok(NULL,"@");
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	71 e0       	ldi	r23, 0x01	; 1
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	31 d0       	rcall	.+98     	; 0x1f6 <strtok>
			char *pArray[10];
			char ptr = strtok(recv_msg,"@");
			
			int i = 0;
			while(ptr!=NULL){
				pArray[i++] = ptr;
 194:	98 01       	movw	r18, r16
			recv_msg[idx-1] = NULL;
			char *pArray[10];
			char ptr = strtok(recv_msg,"@");
			
			int i = 0;
			while(ptr!=NULL){
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	00 97       	sbiw	r24, 0x00	; 0
				pArray[i++] = ptr;
				ptr = strtok(NULL,"@");
			}
			
			if(atoi(pArray[0]) ==131){
 19a:	51 f7       	brne	.-44     	; 0x170 <main+0x92>
 19c:	8d 89       	ldd	r24, Y+21	; 0x15
 19e:	9e 89       	ldd	r25, Y+22	; 0x16
 1a0:	0d d0       	rcall	.+26     	; 0x1bc <atoi>
 1a2:	83 38       	cpi	r24, 0x83	; 131
 1a4:	91 05       	cpc	r25, r1
				UART0_transmit('a');
 1a6:	11 f4       	brne	.+4      	; 0x1ac <main+0xce>
 1a8:	81 e6       	ldi	r24, 0x61	; 97
 1aa:	8e df       	rcall	.-228    	; 0xc8 <UART0_transmit>
				}
			}
			*/
		
			
			memset(recv_msg,0,sizeof(recv_msg));
 1ac:	fe 01       	movw	r30, r28
 1ae:	31 96       	adiw	r30, 0x01	; 1
 1b0:	84 e1       	ldi	r24, 0x14	; 20
 1b2:	df 01       	movw	r26, r30
 1b4:	1d 92       	st	X+, r1
 1b6:	8a 95       	dec	r24
 1b8:	e9 f7       	brne	.-6      	; 0x1b4 <main+0xd6>
 1ba:	a3 cf       	rjmp	.-186    	; 0x102 <main+0x24>

000001bc <atoi>:
 1bc:	fc 01       	movw	r30, r24
 1be:	88 27       	eor	r24, r24
 1c0:	99 27       	eor	r25, r25
 1c2:	e8 94       	clt
 1c4:	21 91       	ld	r18, Z+
 1c6:	20 32       	cpi	r18, 0x20	; 32
 1c8:	e9 f3       	breq	.-6      	; 0x1c4 <atoi+0x8>
 1ca:	29 30       	cpi	r18, 0x09	; 9
 1cc:	10 f0       	brcs	.+4      	; 0x1d2 <atoi+0x16>
 1ce:	2e 30       	cpi	r18, 0x0E	; 14
 1d0:	c8 f3       	brcs	.-14     	; 0x1c4 <atoi+0x8>
 1d2:	2b 32       	cpi	r18, 0x2B	; 43
 1d4:	39 f0       	breq	.+14     	; 0x1e4 <atoi+0x28>
 1d6:	2d 32       	cpi	r18, 0x2D	; 45
 1d8:	31 f4       	brne	.+12     	; 0x1e6 <atoi+0x2a>
 1da:	68 94       	set
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <atoi+0x28>
 1de:	35 d0       	rcall	.+106    	; 0x24a <__mulhi_const_10>
 1e0:	82 0f       	add	r24, r18
 1e2:	91 1d       	adc	r25, r1
 1e4:	21 91       	ld	r18, Z+
 1e6:	20 53       	subi	r18, 0x30	; 48
 1e8:	2a 30       	cpi	r18, 0x0A	; 10
 1ea:	c8 f3       	brcs	.-14     	; 0x1de <atoi+0x22>
 1ec:	1e f4       	brtc	.+6      	; 0x1f4 <atoi+0x38>
 1ee:	90 95       	com	r25
 1f0:	81 95       	neg	r24
 1f2:	9f 4f       	sbci	r25, 0xFF	; 255
 1f4:	08 95       	ret

000001f6 <strtok>:
 1f6:	42 e0       	ldi	r20, 0x02	; 2
 1f8:	51 e0       	ldi	r21, 0x01	; 1
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <strtok_r>

000001fc <strtok_r>:
 1fc:	fa 01       	movw	r30, r20
 1fe:	a1 91       	ld	r26, Z+
 200:	b0 81       	ld	r27, Z
 202:	00 97       	sbiw	r24, 0x00	; 0
 204:	19 f4       	brne	.+6      	; 0x20c <strtok_r+0x10>
 206:	10 97       	sbiw	r26, 0x00	; 0
 208:	e1 f0       	breq	.+56     	; 0x242 <strtok_r+0x46>
 20a:	cd 01       	movw	r24, r26
 20c:	dc 01       	movw	r26, r24
 20e:	cd 01       	movw	r24, r26
 210:	0d 90       	ld	r0, X+
 212:	00 20       	and	r0, r0
 214:	11 f4       	brne	.+4      	; 0x21a <strtok_r+0x1e>
 216:	c0 01       	movw	r24, r0
 218:	13 c0       	rjmp	.+38     	; 0x240 <strtok_r+0x44>
 21a:	fb 01       	movw	r30, r22
 21c:	21 91       	ld	r18, Z+
 21e:	22 23       	and	r18, r18
 220:	19 f0       	breq	.+6      	; 0x228 <strtok_r+0x2c>
 222:	20 15       	cp	r18, r0
 224:	d9 f7       	brne	.-10     	; 0x21c <strtok_r+0x20>
 226:	f3 cf       	rjmp	.-26     	; 0x20e <strtok_r+0x12>
 228:	fb 01       	movw	r30, r22
 22a:	21 91       	ld	r18, Z+
 22c:	20 15       	cp	r18, r0
 22e:	19 f4       	brne	.+6      	; 0x236 <strtok_r+0x3a>
 230:	1e 92       	st	-X, r1
 232:	11 96       	adiw	r26, 0x01	; 1
 234:	06 c0       	rjmp	.+12     	; 0x242 <strtok_r+0x46>
 236:	22 23       	and	r18, r18
 238:	c1 f7       	brne	.-16     	; 0x22a <strtok_r+0x2e>
 23a:	0d 90       	ld	r0, X+
 23c:	00 20       	and	r0, r0
 23e:	a1 f7       	brne	.-24     	; 0x228 <strtok_r+0x2c>
 240:	d0 01       	movw	r26, r0
 242:	fa 01       	movw	r30, r20
 244:	a1 93       	st	Z+, r26
 246:	b0 83       	st	Z, r27
 248:	08 95       	ret

0000024a <__mulhi_const_10>:
 24a:	7a e0       	ldi	r23, 0x0A	; 10
 24c:	97 9f       	mul	r25, r23
 24e:	90 2d       	mov	r25, r0
 250:	87 9f       	mul	r24, r23
 252:	80 2d       	mov	r24, r0
 254:	91 0d       	add	r25, r1
 256:	11 24       	eor	r1, r1
 258:	08 95       	ret

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
