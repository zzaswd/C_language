
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001c8  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000999  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086d  00000000  00000000  00000c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000327  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000453  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000230  00000000  00000000  00001caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001edf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ec       	ldi	r30, 0xC8	; 200
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	4d d0       	rcall	.+154    	; 0x14e <main>
  b4:	87 c0       	rjmp	.+270    	; 0x1c4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <segment>:
						0x39,0x5e,0x79,0x71,
						0x08,0x80};
					


void segment(int n){
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <segment+0x6>
  be:	00 d0       	rcall	.+0      	; 0xc0 <segment+0x8>
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	unsigned char N1000, N100, N10, N1;
	int buff;
	N1000 = n/1000;
  c4:	68 ee       	ldi	r22, 0xE8	; 232
  c6:	73 e0       	ldi	r23, 0x03	; 3
  c8:	56 d0       	rcall	.+172    	; 0x176 <__divmodhi4>
  ca:	36 2f       	mov	r19, r22
	buff = n%1000;
	N100 = buff/100;
  cc:	64 e6       	ldi	r22, 0x64	; 100
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	52 d0       	rcall	.+164    	; 0x176 <__divmodhi4>
  d2:	26 2f       	mov	r18, r22
	buff = buff%100;
	N10 = buff/10;
  d4:	6a e0       	ldi	r22, 0x0A	; 10
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	4e d0       	rcall	.+156    	; 0x176 <__divmodhi4>
	N1=buff%10;
	
	unsigned char PrintFND[] = {N1000,N100,N10,N1};
  da:	39 83       	std	Y+1, r19	; 0x01
  dc:	2a 83       	std	Y+2, r18	; 0x02
  de:	6b 83       	std	Y+3, r22	; 0x03
  e0:	8c 83       	std	Y+4, r24	; 0x04
	
	int mask = 0x01;
	int num = 0;
	/* Replace with your application code */
	for(int i = 0; i < 12 ; i ++){
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	50 e0       	ldi	r21, 0x00	; 0
	N1=buff%10;
	
	unsigned char PrintFND[] = {N1000,N100,N10,N1};
	
	int mask = 0x01;
	int num = 0;
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
	N10 = buff/10;
	N1=buff%10;
	
	unsigned char PrintFND[] = {N1000,N100,N10,N1};
	
	int mask = 0x01;
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
	int num = 0;
	/* Replace with your application code */
	for(int i = 0; i < 12 ; i ++){
  ee:	25 c0       	rjmp	.+74     	; 0x13a <segment+0x82>
		// 0001 0010 0100 1000;
		PORTG = ~mask;
  f0:	62 2f       	mov	r22, r18
  f2:	60 95       	com	r22
  f4:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
		PORTB = font[PrintFND[num++]];
  f8:	bc 01       	movw	r22, r24
  fa:	6f 5f       	subi	r22, 0xFF	; 255
  fc:	7f 4f       	sbci	r23, 0xFF	; 255
  fe:	e1 e0       	ldi	r30, 0x01	; 1
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	ec 0f       	add	r30, r28
 104:	fd 1f       	adc	r31, r29
 106:	e8 0f       	add	r30, r24
 108:	f9 1f       	adc	r31, r25
 10a:	e0 81       	ld	r30, Z
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	e0 50       	subi	r30, 0x00	; 0
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	80 81       	ld	r24, Z
 114:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	86 e6       	ldi	r24, 0x66	; 102
 118:	9e e0       	ldi	r25, 0x0E	; 14
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <segment+0x62>
 11e:	00 00       	nop
		_delay_ms(1);
		mask = mask << 1;
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
		if(num ==4){
 124:	64 30       	cpi	r22, 0x04	; 4
 126:	71 05       	cpc	r23, r1
 128:	11 f0       	breq	.+4      	; 0x12e <segment+0x76>
	int num = 0;
	/* Replace with your application code */
	for(int i = 0; i < 12 ; i ++){
		// 0001 0010 0100 1000;
		PORTG = ~mask;
		PORTB = font[PrintFND[num++]];
 12a:	cb 01       	movw	r24, r22
 12c:	04 c0       	rjmp	.+8      	; 0x136 <segment+0x7e>
		_delay_ms(1);
		mask = mask << 1;
		if(num ==4){
			mask = 0x01;
			num = 0;
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
		PORTG = ~mask;
		PORTB = font[PrintFND[num++]];
		_delay_ms(1);
		mask = mask << 1;
		if(num ==4){
			mask = 0x01;
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char PrintFND[] = {N1000,N100,N10,N1};
	
	int mask = 0x01;
	int num = 0;
	/* Replace with your application code */
	for(int i = 0; i < 12 ; i ++){
 136:	4f 5f       	subi	r20, 0xFF	; 255
 138:	5f 4f       	sbci	r21, 0xFF	; 255
 13a:	4c 30       	cpi	r20, 0x0C	; 12
 13c:	51 05       	cpc	r21, r1
 13e:	c4 f2       	brlt	.-80     	; 0xf0 <segment+0x38>
		if(num ==4){
			mask = 0x01;
			num = 0;
		}
	}
}
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <main>:

int main(void)
{
	DDRB = 0xff; // Port B의 0~37까지의 Pin을 사용하겠다.
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	87 bb       	out	0x17, r24	; 23
	DDRG = 0x0f; // Port G의 0~3까지의 Pin만 사용하겠다.
 152:	8f e0       	ldi	r24, 0x0F	; 15
 154:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	int count = 0;
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	04 c0       	rjmp	.+8      	; 0x166 <main+0x18>
    /* Replace with your application code */
    while (1) 
    {
		segment(count++);
 15e:	ce 01       	movw	r24, r28
 160:	02 c0       	rjmp	.+4      	; 0x166 <main+0x18>
		if(count ==9999) count = 0;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
	
	int count = 0;
    /* Replace with your application code */
    while (1) 
    {
		segment(count++);
 166:	ec 01       	movw	r28, r24
 168:	21 96       	adiw	r28, 0x01	; 1
 16a:	a6 df       	rcall	.-180    	; 0xb8 <segment>
		if(count ==9999) count = 0;
 16c:	cf 30       	cpi	r28, 0x0F	; 15
 16e:	87 e2       	ldi	r24, 0x27	; 39
 170:	d8 07       	cpc	r29, r24
 172:	a9 f7       	brne	.-22     	; 0x15e <main+0x10>
 174:	f6 cf       	rjmp	.-20     	; 0x162 <main+0x14>

00000176 <__divmodhi4>:
 176:	97 fb       	bst	r25, 7
 178:	07 2e       	mov	r0, r23
 17a:	16 f4       	brtc	.+4      	; 0x180 <__divmodhi4+0xa>
 17c:	00 94       	com	r0
 17e:	06 d0       	rcall	.+12     	; 0x18c <__divmodhi4_neg1>
 180:	77 fd       	sbrc	r23, 7
 182:	08 d0       	rcall	.+16     	; 0x194 <__divmodhi4_neg2>
 184:	0b d0       	rcall	.+22     	; 0x19c <__udivmodhi4>
 186:	07 fc       	sbrc	r0, 7
 188:	05 d0       	rcall	.+10     	; 0x194 <__divmodhi4_neg2>
 18a:	3e f4       	brtc	.+14     	; 0x19a <__divmodhi4_exit>

0000018c <__divmodhi4_neg1>:
 18c:	90 95       	com	r25
 18e:	81 95       	neg	r24
 190:	9f 4f       	sbci	r25, 0xFF	; 255
 192:	08 95       	ret

00000194 <__divmodhi4_neg2>:
 194:	70 95       	com	r23
 196:	61 95       	neg	r22
 198:	7f 4f       	sbci	r23, 0xFF	; 255

0000019a <__divmodhi4_exit>:
 19a:	08 95       	ret

0000019c <__udivmodhi4>:
 19c:	aa 1b       	sub	r26, r26
 19e:	bb 1b       	sub	r27, r27
 1a0:	51 e1       	ldi	r21, 0x11	; 17
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <__udivmodhi4_ep>

000001a4 <__udivmodhi4_loop>:
 1a4:	aa 1f       	adc	r26, r26
 1a6:	bb 1f       	adc	r27, r27
 1a8:	a6 17       	cp	r26, r22
 1aa:	b7 07       	cpc	r27, r23
 1ac:	10 f0       	brcs	.+4      	; 0x1b2 <__udivmodhi4_ep>
 1ae:	a6 1b       	sub	r26, r22
 1b0:	b7 0b       	sbc	r27, r23

000001b2 <__udivmodhi4_ep>:
 1b2:	88 1f       	adc	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	5a 95       	dec	r21
 1b8:	a9 f7       	brne	.-22     	; 0x1a4 <__udivmodhi4_loop>
 1ba:	80 95       	com	r24
 1bc:	90 95       	com	r25
 1be:	bc 01       	movw	r22, r24
 1c0:	cd 01       	movw	r24, r26
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
