
Project_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000194  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b60  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000899  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b0  00000000  00000000  000016d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000467  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000278  00000000  00000000  00001f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000021ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	60 d0       	rcall	.+192    	; 0x174 <main>
  b4:	6d c0       	rjmp	.+218    	; 0x190 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCD_pulse_enable>:
#define COMMAND_DISPLAY_ON_OFF_BIT	2
#define COMMNAD_CURSOR_ON_OFF_BIT	1
#define COMMAND_BLINK_ON_OFF_BIT	0

void LCD_pulse_enable(void){
	PORT_CONTROL |= (1<<E_PIN);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	86 e6       	ldi	r24, 0x66	; 102
  c0:	9e e0       	ldi	r25, 0x0E	; 14
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <LCD_pulse_enable+0xa>
  c6:	00 00       	nop
	_delay_ms(1);
	PORT_CONTROL &= ~(1<<E_PIN);
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	8b 7f       	andi	r24, 0xFB	; 251
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	86 e6       	ldi	r24, 0x66	; 102
  d0:	9e e0       	ldi	r25, 0x0E	; 14
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_pulse_enable+0x1a>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <LCD_write_data>:
	_delay_ms(1);
}

void LCD_write_data(uint8_t data){
	PORT_CONTROL |= (1<<RS_PIN);
  da:	95 b3       	in	r25, 0x15	; 21
  dc:	91 60       	ori	r25, 0x01	; 1
  de:	95 bb       	out	0x15, r25	; 21
	PORT_DATA =data;
  e0:	82 bb       	out	0x12, r24	; 18
	LCD_pulse_enable();
  e2:	ea df       	rcall	.-44     	; 0xb8 <LCD_pulse_enable>
  e4:	8c ec       	ldi	r24, 0xCC	; 204
  e6:	9c e1       	ldi	r25, 0x1C	; 28
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_write_data+0xe>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_write_data+0x14>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <LCD_write_command>:
	_delay_ms(2);
}

void LCD_write_command(uint8_t command){
	PORT_CONTROL &= ~(1<<RS_PIN);
  f2:	95 b3       	in	r25, 0x15	; 21
  f4:	9e 7f       	andi	r25, 0xFE	; 254
  f6:	95 bb       	out	0x15, r25	; 21
	PORT_DATA = command;
  f8:	82 bb       	out	0x12, r24	; 18
	LCD_pulse_enable();
  fa:	de df       	rcall	.-68     	; 0xb8 <LCD_pulse_enable>
  fc:	8c ec       	ldi	r24, 0xCC	; 204
  fe:	9c e1       	ldi	r25, 0x1C	; 28
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_write_command+0xe>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_write_command+0x14>
 106:	00 00       	nop
 108:	08 95       	ret

0000010a <LCD_clear>:
	_delay_ms(2);
}

void LCD_clear(void){
	LCD_write_command(COMMAND_CLEAR_DISPLAY);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	f2 df       	rcall	.-28     	; 0xf2 <LCD_write_command>
 10e:	8c ec       	ldi	r24, 0xCC	; 204
 110:	9c e1       	ldi	r25, 0x1C	; 28
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_clear+0x8>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_clear+0xe>
 118:	00 00       	nop
 11a:	08 95       	ret

0000011c <LCD_init>:
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	92 e0       	ldi	r25, 0x02	; 2
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <LCD_init+0x6>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LCD_init+0x10>
 12c:	00 00       	nop
	_delay_ms(2);
}

void LCD_init(void){
	_delay_ms(50);
	DDR_DATA = 0xFF;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	81 bb       	out	0x11, r24	; 17
	PORT_DATA = 0x00;
 132:	12 ba       	out	0x12, r1	; 18
	DDR_CONTROL |= (1<<RS_PIN) | (1<<RW_PIN) | (1<<E_PIN);
 134:	84 b3       	in	r24, 0x14	; 20
 136:	87 60       	ori	r24, 0x07	; 7
 138:	84 bb       	out	0x14, r24	; 20
	
	PORT_CONTROL &= ~(1<<RW_PIN);
 13a:	85 b3       	in	r24, 0x15	; 21
 13c:	8d 7f       	andi	r24, 0xFD	; 253
 13e:	85 bb       	out	0x15, r24	; 21
	LCD_write_command(COMMAND_8_BIT_MODE);
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	d7 df       	rcall	.-82     	; 0xf2 <LCD_write_command>
	
	uint8_t command = 0x08 | (1<<COMMAND_DISPLAY_ON_OFF_BIT);
	LCD_write_command(command);
 144:	8c e0       	ldi	r24, 0x0C	; 12
	
	LCD_clear();
 146:	d5 df       	rcall	.-86     	; 0xf2 <LCD_write_command>
	
	LCD_write_command(0x06);
 148:	e0 df       	rcall	.-64     	; 0x10a <LCD_clear>
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	d2 cf       	rjmp	.-92     	; 0xf2 <LCD_write_command>
 14e:	08 95       	ret

00000150 <LCD_write_string>:
}


void LCD_write_string(char *string){
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i = 0; string[i]; i++){
 158:	c0 e0       	ldi	r28, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <LCD_write_string+0x10>
		LCD_write_data(string[i]);
 15c:	be df       	rcall	.-132    	; 0xda <LCD_write_data>
}


void LCD_write_string(char *string){
	uint8_t i;
	for(i = 0; string[i]; i++){
 15e:	cf 5f       	subi	r28, 0xFF	; 255
 160:	f8 01       	movw	r30, r16
 162:	ec 0f       	add	r30, r28
 164:	f1 1d       	adc	r31, r1
 166:	80 81       	ld	r24, Z
 168:	81 11       	cpse	r24, r1
 16a:	f8 cf       	rjmp	.-16     	; 0x15c <LCD_write_string+0xc>
		LCD_write_data(string[i]);
	}
}
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	08 95       	ret

00000174 <main>:



int main(void)
{
	LCD_init();
 174:	d3 df       	rcall	.-90     	; 0x11c <LCD_init>
	LCD_write_string("Hello JMSasdasdasdasd");
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	ea df       	rcall	.-44     	; 0x150 <LCD_write_string>
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	9c e2       	ldi	r25, 0x2C	; 44
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0xe>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x18>
 18c:	00 00       	nop
 18e:	ff cf       	rjmp	.-2      	; 0x18e <main+0x1a>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
