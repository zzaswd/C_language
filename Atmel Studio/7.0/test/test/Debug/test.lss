
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009af  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000869  00000000  00000000  00000c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000354  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000155  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001e25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	53 d0       	rcall	.+166    	; 0x150 <main>
  aa:	87 c0       	rjmp	.+270    	; 0x1ba <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Servo>:
int AngleCount = 0;
void Servo(int);

void Servo(int Angle)
{
   if (Angle == -90 )
  ae:	86 3a       	cpi	r24, 0xA6	; 166
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	92 07       	cpc	r25, r18
  b4:	39 f4       	brne	.+14     	; 0xc4 <Servo+0x16>
   AngleCount = 23; // PWM ON Time 2.3[ms]
  b6:	87 e1       	ldi	r24, 0x17	; 23
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  c2:	08 95       	ret
   else if (Angle == 0)
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	39 f4       	brne	.+14     	; 0xd6 <Servo+0x28>
   AngleCount = 14; // PWM ON Time 1.5[ms]
  c8:	8e e0       	ldi	r24, 0x0E	; 14
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	08 95       	ret
   else if(Angle == 90)
  d6:	8a 35       	cpi	r24, 0x5A	; 90
  d8:	91 05       	cpc	r25, r1
  da:	31 f4       	brne	.+12     	; 0xe8 <Servo+0x3a>
   AngleCount = 7; // PWM ON Time 0.7[ms]
  dc:	87 e0       	ldi	r24, 0x07	; 7
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	08 95       	ret

000000ea <__vector_16>:
 }
 
   
ISR(TIMER0_OVF_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
   TCNT0 = 244;
  fc:	84 ef       	ldi	r24, 0xF4	; 244
  fe:	82 bf       	out	0x32, r24	; 50
   t_cnt++;
 100:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_cnt>
 104:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <t_cnt+0x1>
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <t_cnt+0x1>
 10e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <t_cnt>
   
   if(t_cnt <= AngleCount)
 112:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11a:	28 17       	cp	r18, r24
 11c:	39 07       	cpc	r19, r25
 11e:	1c f0       	brlt	.+6      	; 0x126 <__vector_16+0x3c>
      PORTD= 0xff; // PWM ON Time
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	82 bb       	out	0x12, r24	; 18
 124:	01 c0       	rjmp	.+2      	; 0x128 <__vector_16+0x3e>
   else
      PORTD = 0x00; // PWM OFF Time
 126:	12 ba       	out	0x12, r1	; 18
   if(t_cnt >= 200)
 128:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <t_cnt>
 12c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <t_cnt+0x1>
 130:	88 3c       	cpi	r24, 0xC8	; 200
 132:	91 05       	cpc	r25, r1
 134:	24 f0       	brlt	.+8      	; 0x13e <__vector_16+0x54>
      t_cnt = 0; // 20[ms] 주기 PWM
 136:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <t_cnt+0x1>
 13a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <t_cnt>
}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <main>:

int main(void)
{

   DDRD = 0xff;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	81 bb       	out	0x11, r24	; 17
   //OCR0 = 131;
   PORTD = 0xff;
 154:	82 bb       	out	0x12, r24	; 18
   TCCR0 = (1<<CS02) |  (0<<CS01) | (1<<CS00);
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	83 bf       	out	0x33, r24	; 51
   TIMSK = (1<<TOIE0) ;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	87 bf       	out	0x37, r24	; 55
   AngleCount = 15; // 초기 서보 위치를 0도로 설정한다
 15e:	8f e0       	ldi	r24, 0x0F	; 15
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
   TCNT0 = 244;
 16a:	84 ef       	ldi	r24, 0xF4	; 244
 16c:	82 bf       	out	0x32, r24	; 50
   
   sei();
 16e:	78 94       	sei
    /* Replace with your application code */
   

    while (1)
    {
       Servo(0);
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	9c df       	rcall	.-200    	; 0xae <Servo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	96 e8       	ldi	r25, 0x86	; 134
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x2c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x36>
 186:	00 00       	nop
       _delay_ms(3000);

       Servo(90);
 188:	8a e5       	ldi	r24, 0x5A	; 90
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 df       	rcall	.-224    	; 0xae <Servo>
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	96 e8       	ldi	r25, 0x86	; 134
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x44>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x4e>
 19e:	00 00       	nop
       _delay_ms(3000);

       Servo(-90);
 1a0:	86 ea       	ldi	r24, 0xA6	; 166
 1a2:	9f ef       	ldi	r25, 0xFF	; 255
 1a4:	84 df       	rcall	.-248    	; 0xae <Servo>
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	96 e8       	ldi	r25, 0x86	; 134
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x5c>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x66>
 1b6:	00 00       	nop
 1b8:	db cf       	rjmp	.-74     	; 0x170 <main+0x20>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
