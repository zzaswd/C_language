
prescaler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000022c  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ca  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000879  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000372  00000000  00000000  000015b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045e  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000242  00000000  00000000  00001dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	9b c0       	rjmp	.+310    	; 0x15c <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e2       	ldi	r30, 0x2C	; 44
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	77 d0       	rcall	.+238    	; 0x1b2 <main>
  c4:	b1 c0       	rjmp	.+354    	; 0x228 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <segment>:
						0x66,0x6d,0x7d,0x07,
						0x7f,0x6f,0x77,0x7c,
						0x39,0x5e,0x79,0x71,
						0x08,0x80};

void segment(int n){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <segment+0x6>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <segment+0x8>
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	unsigned char N1000, N100, N10, N1;
	int buff;
	N1000 = n/1000;
  d4:	68 ee       	ldi	r22, 0xE8	; 232
  d6:	73 e0       	ldi	r23, 0x03	; 3
  d8:	80 d0       	rcall	.+256    	; 0x1da <__divmodhi4>
  da:	36 2f       	mov	r19, r22
	buff = n%1000;
	N100 = buff/100;
  dc:	64 e6       	ldi	r22, 0x64	; 100
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	7c d0       	rcall	.+248    	; 0x1da <__divmodhi4>
  e2:	26 2f       	mov	r18, r22
	buff = buff%100;
	N10 = buff/10;
  e4:	6a e0       	ldi	r22, 0x0A	; 10
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	78 d0       	rcall	.+240    	; 0x1da <__divmodhi4>
	N1=buff%10;
	
	unsigned char PrintFND[] = {N1000,N100,N10,N1};
  ea:	39 83       	std	Y+1, r19	; 0x01
  ec:	2a 83       	std	Y+2, r18	; 0x02
  ee:	6b 83       	std	Y+3, r22	; 0x03
  f0:	8c 83       	std	Y+4, r24	; 0x04
	
	int mask = 0x01;
	int num = 0;
	/* Replace with your application code */
	for(int i = 0; i < 12 ; i ++){
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
	N1=buff%10;
	
	unsigned char PrintFND[] = {N1000,N100,N10,N1};
	
	int mask = 0x01;
	int num = 0;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
	N10 = buff/10;
	N1=buff%10;
	
	unsigned char PrintFND[] = {N1000,N100,N10,N1};
	
	int mask = 0x01;
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
	int num = 0;
	/* Replace with your application code */
	for(int i = 0; i < 12 ; i ++){
  fe:	24 c0       	rjmp	.+72     	; 0x148 <segment+0x80>
		// 0001 0010 0100 1000;
		PORTC = ~mask;
 100:	62 2f       	mov	r22, r18
 102:	60 95       	com	r22
 104:	65 bb       	out	0x15, r22	; 21
		PORTA = font[PrintFND[num++]];
 106:	bc 01       	movw	r22, r24
 108:	6f 5f       	subi	r22, 0xFF	; 255
 10a:	7f 4f       	sbci	r23, 0xFF	; 255
 10c:	e1 e0       	ldi	r30, 0x01	; 1
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	ec 0f       	add	r30, r28
 112:	fd 1f       	adc	r31, r29
 114:	e8 0f       	add	r30, r24
 116:	f9 1f       	adc	r31, r25
 118:	e0 81       	ld	r30, Z
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	e0 50       	subi	r30, 0x00	; 0
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	80 81       	ld	r24, Z
 122:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	86 e6       	ldi	r24, 0x66	; 102
 126:	9e e0       	ldi	r25, 0x0E	; 14
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <segment+0x60>
 12c:	00 00       	nop
		_delay_ms(1);
		mask = mask << 1;
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
		if(num ==4){
 132:	64 30       	cpi	r22, 0x04	; 4
 134:	71 05       	cpc	r23, r1
 136:	11 f0       	breq	.+4      	; 0x13c <segment+0x74>
	int num = 0;
	/* Replace with your application code */
	for(int i = 0; i < 12 ; i ++){
		// 0001 0010 0100 1000;
		PORTC = ~mask;
		PORTA = font[PrintFND[num++]];
 138:	cb 01       	movw	r24, r22
 13a:	04 c0       	rjmp	.+8      	; 0x144 <segment+0x7c>
		_delay_ms(1);
		mask = mask << 1;
		if(num ==4){
			mask = 0x01;
			num = 0;
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
		PORTC = ~mask;
		PORTA = font[PrintFND[num++]];
		_delay_ms(1);
		mask = mask << 1;
		if(num ==4){
			mask = 0x01;
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char PrintFND[] = {N1000,N100,N10,N1};
	
	int mask = 0x01;
	int num = 0;
	/* Replace with your application code */
	for(int i = 0; i < 12 ; i ++){
 144:	4f 5f       	subi	r20, 0xFF	; 255
 146:	5f 4f       	sbci	r21, 0xFF	; 255
 148:	4c 30       	cpi	r20, 0x0C	; 12
 14a:	51 05       	cpc	r21, r1
 14c:	cc f2       	brlt	.-78     	; 0x100 <segment+0x38>
		if(num ==4){
			mask = 0x01;
			num = 0;
		}
	}
}
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <__vector_9>:

#if 1  // CTC 모드 사용해보기

//255- 100 155
ISR(TIMER2_COMP_vect){
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
	TCNT2 = 0xf2;
 16c:	82 ef       	ldi	r24, 0xF2	; 242
 16e:	84 bd       	out	0x24, r24	; 36
	t_cnt++;
 170:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <t_cnt>
 174:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <t_cnt+0x1>
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <t_cnt+0x1>
 17e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <t_cnt>
	if(t_cnt == 1000){
 182:	88 3e       	cpi	r24, 0xE8	; 232
 184:	93 40       	sbci	r25, 0x03	; 3
 186:	69 f4       	brne	.+26     	; 0x1a2 <__vector_9+0x46>
		t_cnt = 0;
 188:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <t_cnt+0x1>
 18c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <t_cnt>
		m_cnt++;
 190:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 194:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 19e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	}
}
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <main>:


int main(void)
{
	DDRA =0xff;
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	9a bb       	out	0x1a, r25	; 26
	DDRC = 0x0f;
 1b6:	2f e0       	ldi	r18, 0x0F	; 15
 1b8:	24 bb       	out	0x14, r18	; 20
	DDRB = 0x80;
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	87 bb       	out	0x17, r24	; 23
	//PORTA = 0xff;
	PORTC = 0x0f;
 1be:	25 bb       	out	0x15, r18	; 21
	OCR2 =255;
 1c0:	93 bd       	out	0x23, r25	; 35
	
	TCCR2 = (1<<CS22) | (1<<CS20) | (0<<COM21) | (1<<COM20) | (1<<WGM21) | (0<<WGM20);
 1c2:	9d e1       	ldi	r25, 0x1D	; 29
 1c4:	95 bd       	out	0x25, r25	; 37
	TIMSK = (1<<OCIE2);
 1c6:	87 bf       	out	0x37, r24	; 55
	TCNT2 = 241;
 1c8:	81 ef       	ldi	r24, 0xF1	; 241
 1ca:	84 bd       	out	0x24, r24	; 36
	sei();
 1cc:	78 94       	sei
	
	
	/* Replace with your application code */
	while (1)
	{
		segment(m_cnt);
 1ce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1d2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 1d6:	78 df       	rcall	.-272    	; 0xc8 <segment>
 1d8:	fa cf       	rjmp	.-12     	; 0x1ce <main+0x1c>

000001da <__divmodhi4>:
 1da:	97 fb       	bst	r25, 7
 1dc:	07 2e       	mov	r0, r23
 1de:	16 f4       	brtc	.+4      	; 0x1e4 <__divmodhi4+0xa>
 1e0:	00 94       	com	r0
 1e2:	06 d0       	rcall	.+12     	; 0x1f0 <__divmodhi4_neg1>
 1e4:	77 fd       	sbrc	r23, 7
 1e6:	08 d0       	rcall	.+16     	; 0x1f8 <__divmodhi4_neg2>
 1e8:	0b d0       	rcall	.+22     	; 0x200 <__udivmodhi4>
 1ea:	07 fc       	sbrc	r0, 7
 1ec:	05 d0       	rcall	.+10     	; 0x1f8 <__divmodhi4_neg2>
 1ee:	3e f4       	brtc	.+14     	; 0x1fe <__divmodhi4_exit>

000001f0 <__divmodhi4_neg1>:
 1f0:	90 95       	com	r25
 1f2:	81 95       	neg	r24
 1f4:	9f 4f       	sbci	r25, 0xFF	; 255
 1f6:	08 95       	ret

000001f8 <__divmodhi4_neg2>:
 1f8:	70 95       	com	r23
 1fa:	61 95       	neg	r22
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255

000001fe <__divmodhi4_exit>:
 1fe:	08 95       	ret

00000200 <__udivmodhi4>:
 200:	aa 1b       	sub	r26, r26
 202:	bb 1b       	sub	r27, r27
 204:	51 e1       	ldi	r21, 0x11	; 17
 206:	07 c0       	rjmp	.+14     	; 0x216 <__udivmodhi4_ep>

00000208 <__udivmodhi4_loop>:
 208:	aa 1f       	adc	r26, r26
 20a:	bb 1f       	adc	r27, r27
 20c:	a6 17       	cp	r26, r22
 20e:	b7 07       	cpc	r27, r23
 210:	10 f0       	brcs	.+4      	; 0x216 <__udivmodhi4_ep>
 212:	a6 1b       	sub	r26, r22
 214:	b7 0b       	sbc	r27, r23

00000216 <__udivmodhi4_ep>:
 216:	88 1f       	adc	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	5a 95       	dec	r21
 21c:	a9 f7       	brne	.-22     	; 0x208 <__udivmodhi4_loop>
 21e:	80 95       	com	r24
 220:	90 95       	com	r25
 222:	bc 01       	movw	r22, r24
 224:	cd 01       	movw	r24, r26
 226:	08 95       	ret

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
